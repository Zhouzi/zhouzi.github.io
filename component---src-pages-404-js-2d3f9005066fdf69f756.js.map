{"version":3,"sources":["webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/404.js"],"names":["m","module","exports","require","default","ProdPageRenderer","location","pageResources","React","createElement","InternalPageRenderer","json","loader","enqueue","createContext","PageNotFound","searchQuery","setSearchQuery","window","pathname","split","filter","str","length","map","encodeURIComponent","join","Layout","Section","Container","large","Heading1","Paragraph","Link","href","as","RouterLink","to"],"mappings":"8EAAA,IAAsBA,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,geCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEC,IAAMC,cAAcC,I,+VAApB,EACLJ,WACAC,iBACGA,EAAcI,OALV,O,yKCOcC,QAAOC,QAELL,IAAMM,cAAc,I,4ECPhC,SAASC,IAAgB,IAAD,EACCP,WAAe,MAA9CQ,EAD8B,KACjBC,EADiB,KAerC,OAZAT,aAAgB,WAGdS,EACEC,OAAOZ,SAASa,SACbC,MAAM,QACNC,QAAO,SAACC,GAAD,OAASA,EAAIC,OAAS,KAC7BC,KAAI,SAACF,GAAD,OAASG,mBAAmBH,MAChCI,KAAK,QAET,IAGD,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,gBAACC,EAAA,EAAD,kCAEF,gBAACF,EAAA,EAAD,KACE,gBAACG,EAAA,EAAD,yFAIA,0BACGhB,GACC,0BACE,gBAACiB,EAAA,EAAD,CAAMC,KAAI,+BAAiClB,GAA3C,iCAKJ,0BACE,gBAACiB,EAAA,EAAD,CAAME,GAAIC,IAAYC,GAAG,KAAzB,uBAIF,yCACe,IACb,gBAACJ,EAAA,EAAD,CAAMC,KAAK,iCAAX","file":"component---src-pages-404-js-2d3f9005066fdf69f756.js","sourcesContent":["const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n\n  // query is a stringified number like `3303882` when wrapped with graphql, If a user forgets\n  // to wrap the query in a grqphql, then casting it to a Number results in `NaN` allowing us to\n  // catch the misuse of the API and give proper direction\n  if (isNaN(Number(query))) {\n    throw new Error(`useStaticQuery was called with a string but expects to be called using \\`graphql\\`. Try this:\n\nimport { useStaticQuery, graphql } from 'gatsby';\n\nuseStaticQuery(graphql\\`${query}\\`);\n`)\n  }\n\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport Section from \"../components/Section\";\nimport Container from \"../components/Container\";\nimport Heading1 from \"../components/Heading1\";\nimport Paragraph from \"../components/Paragraph\";\nimport Link from \"../components/Link\";\n\nexport default function PageNotFound() {\n  const [searchQuery, setSearchQuery] = React.useState(null);\n\n  React.useEffect(() => {\n    // window.location.pathname is unpredictable so it must be computed at run time,\n    // not in SSR\n    setSearchQuery(\n      window.location.pathname\n        .split(/[-/]/)\n        .filter((str) => str.length > 0)\n        .map((str) => encodeURIComponent(str))\n        .join(\"+\")\n    );\n  }, []);\n\n  return (\n    <Layout>\n      <Section>\n        <Container large>\n          <Heading1>This page doesn't exist.</Heading1>\n        </Container>\n        <Container>\n          <Paragraph>\n            Maybe it's gone, or perhaps it never existed. Here are a few things\n            you can try:\n          </Paragraph>\n          <ul>\n            {searchQuery && (\n              <li>\n                <Link href={`https://google.com/search?q=${searchQuery}`}>\n                  Search for alternative links\n                </Link>\n              </li>\n            )}\n            <li>\n              <Link as={RouterLink} to=\"/\">\n                Go to the homepage\n              </Link>\n            </li>\n            <li>\n              Report it to{\" \"}\n              <Link href=\"mailto:hello@gabinaureche.com\">\n                hello@gabinaureche.com\n              </Link>\n            </li>\n          </ul>\n        </Container>\n      </Section>\n    </Layout>\n  );\n}\n"],"sourceRoot":""}