{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"githubData":{"data":{"user":{"itemShowcase":{"items":{"edges":[{"node":{"description":"Typing animation mimicking human behavior.","name":"TheaterJS","url":"https://github.com/Zhouzi/TheaterJS"}},{"node":{"description":"💫 Perceived performance best practices & resources.","name":"awesome-perceived-performance","url":"https://github.com/Zhouzi/awesome-perceived-performance"}},{"node":{"description":"Browser extension bringing the Xbox Game Pass to Steam.","name":"included-with-xbox-game-pass","url":"https://github.com/Zhouzi/included-with-xbox-game-pass"}},{"node":{"description":"graphql-codegen plugin to generate factories","name":"graphql-codegen-factories","url":"https://github.com/Zhouzi/graphql-codegen-factories"}},{"node":{"description":"In this mini-game, your goal is to name a random Gwent card from its illustration.","name":"name-the-gwent-card","url":"https://github.com/Zhouzi/name-the-gwent-card"}},{"node":{"description":"A Game About JavaScript Logical Operators.","name":"logicalornot","url":"https://github.com/Zhouzi/logicalornot"}}]}}}}},"allFeedMedium":{"edges":[{"node":{"link":"https://medium.com/@Zh0uzi/setting-up-a-javascript-project-prerequisites-a0bec81b12df?source=rss-52eaf0669084------2","title":"Setting up a JavaScript project: Prerequisites","content":{"encoded":"<p>Obviously, you need some JavaScript, HTML and CSS knowledge to start a JavaScript project. You also need to install Node on your computer and have a basic understanding of Git, although you can probably skip that last part. But in my experience with fellow programmers starting out with JavaScript and juniors jumping in their first project, the one thing that’s often the source of many misunderstandings is NPM (Node Package Manager).</p><p>When installing Node, there are two commands that come with it: node and npm. The former is used to execute some server-side JavaScript (Node.js) and the latter to install third-party packages. Simply put, NPM is a cloud where developers publish their code so other developers can use it in their own project. For example, JavaScript doesn’t have a function to pick a random item from an Array so you could use the <a href=\"https://www.npmjs.com/package/random-item\">random-item</a> package. Instead of downloading the files manually, you can simply run npm install random-item in your project. This article is mostly about NPM so I’ll expand on that later. For now, let’s start with the beginning.</p><h4>Every JavaScript project has a package.json</h4><p>The package.json is the file that describes the project, lists its dependencies (i.e random-item in our previous example) and commands. It can contain much more than that though, feel free to have a look at the <a href=\"https://docs.npmjs.com/files/package.json\">full list of properties</a> if you are curious. To create this file, you can run the command npm init at the root of your project. It will guide you through a few questions and create the package.json file at the end of the process.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*uJ04Tko_AV6m4iu1nLr67Q.png\" /><figcaption>Example of a package.json with the default options.</figcaption></figure><p>Most of the information contained by the package.json is useful when publishing your code to the “NPM cloud”. For example, the name, description, keywords, and author is what appears on the dedicated NPM page. You can ignore them if you do not plan to publish a package, they won’t have any effect. At this point, there are only three properties that you need to know: devDependencies, dependencies, and scripts.</p><h4>Tracking development and production dependencies</h4><p>Unless you want to do it like in the good old jQuery days, tooling has become almost unavoidable in a JavaScript project. For example, the language’s latest features are not supported by all browsers so it’s pretty common to compile the code to something that can be executed by anyone’s browser. For that, you would need to install <a href=\"https://babeljs.io/\">Babel</a>. But then, if you want to split your code into separate files and use imports you would also need <a href=\"https://webpack.js.org/\">Webpack</a>. CSS you said? That’s something of the past, you should consider <a href=\"https://www.styled-components.com/\">styled components</a>, <a href=\"https://github.com/css-modules/css-modules\">CSS modules</a> or <a href=\"https://github.com/Khan/aphrodite\">Aphrodite</a>. I could continue like that for a long time but you get the idea: there are a lot of things you might (or might not) want to install. Don’t be afraid though, the whole purpose of this serie is to install as few packages as possible.</p><p>The tooling I mentioned so far is for development. They are tools you need to install on your computer to compile the code. Ultimately, what you will deploy is the compiled code, not the source code so there is no point in installing them on the production server. To take an example, let’s install the package <a href=\"http://npmjs.com/package/parcel-bundler\">parcel-bundler</a> as a development dependency:</p><pre>npm install parcel-bundler --save-dev</pre><p>Doing so will update our previous package.json to the following:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OzH5Pco-nAwNIxgNkfkUTQ.png\" /><figcaption>The “devDependencies” property was added.</figcaption></figure><p>The parcel-bundler package has been installed and added to the devDependencies, with a specific version range (^1.11.0). What’s great with installing packages this way is that you know precisely what your project depends on and on which version. More importantly, if you were to git clone the project on another computer, you could install all the required dependencies by simply running npm install. This command would lookup your package.json file and install all the dependencies with the correct version.</p><p>That’s for development but some packages are going to be required for your project to run. Let’s say you are building an application that displays a random background color from an Array of possible values. The code could look like this:</p><pre><em>import </em>randomItem <em>from </em>&#39;random-item&#39;;<br><br><em>const </em>colors = [<br>  &#39;red&#39;,<br>  &#39;yellow&#39;,<br>  &#39;orange&#39;,<br>  &#39;pink&#39;,<br>  &#39;green&#39;<br>];<br><br>window.document.body.style.backgroundColor = randomItem(colors);</pre><p>It uses the random-item package mentioned earlier in this article. In production, the random-item package will still be required for the application to work. In this case, random-item is a production dependency and should be installed as follows:</p><pre>npm install random-item</pre><p>Not telling npm that random-item is a development dependency with the --save-dev flag suggests that it’s a production dependency. This command would update the package.json like so:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*D2zoVFgpZikEEPXYq9Qy6Q.png\" /><figcaption>The “dependencies” property was added.</figcaption></figure><p>Just like devDependencies, dependencies are installed when running the npm install command. Note that it’s pretty uncommon to manually edit those properties. Most of the time, they are updated through the npm CLI.</p><p>As you probably guessed, npm install is often the first command to run when cloning a JavaScript project. It will pull in all the dependencies and you should be good to go. The next step is to contribute to the project. You would need to start it and eventually compile the files when you make a change. Starting and compiling a JavaScript application differs from a project to another due to the different tooling and configuration. There is no one command to start a project, although there is a convention I will be sharing in this article. Still, it would be a pain to have to run parcel index.html --port 3000 --log-level 0 --openeverytime you want to start the server.</p><h4>Create shortcut commands with npm scripts</h4><p>scripts is a package.json’s property that contains shortcut commands. If you wanted to alias the previous command to “start”, you could do the following:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*b1gFKqiUUbseKwU7uKl6og.png\" /></figure><p>Now, when running npm run start npm will look into the package.json’s scripts and execute the command matching “start”, which is:</p><pre>parcel index.html --port 3000 --log-level 0 --open</pre><p>If you try to run this command instead of the start script (through npm run start) an error would be thrown, telling you that “parcel” is not a known command. That’s because installing a package in a JavaScript project doesn’t install it on your computer, thankfully. The packages are only installed locally by default, in the “node_modules” folder. If you really wanted to run the command yourself, you would need to update it to:</p><pre>./node_modules/.bin/parcel index.html --port 3000 --log-level 0 --open</pre><p>The “node_modules” folder contains a “.bin” folder with links to the packages’ executable command (if any). That prefix is automatically added by npm when running scripts so that’s one more reason for using them.</p><h4>The conventions</h4><p>The NPM CLI comes in with a few conventions. For example, the command to start a project is usually “start” and the one to test is “test”. For these commands, you can omit the “run” part in npm run start so npm start is equivalent. There are other official conventions but they are not as common as these two.</p><h4>Wrapping up</h4><p>That is enough NPM to get a JavaScript project running. I wanted to dedicate a whole article to NPM because I come too often across missing dependencies in the package.json and an unclear workflow to start and contribute when browsing juniors’ projects. The idea to keep in mind is that it should be simple for you, your future you getting back to the project later and possibly another developer.</p><p>This article is part of a serie:</p><ul><li><a href=\"https://medium.com/@Zh0uzi/setting-up-a-javascript-project-introduction-c8eca809b133\">Setting up a JavaScript project: Introduction</a></li><li><a href=\"https://medium.com/@Zh0uzi/setting-up-a-javascript-project-prerequisites-a0bec81b12df\">Setting up a JavaScript project: Prerequisites</a></li><li><em>Setting up a JavaScript project: No-configuration tools</em></li><li><em>Setting up a JavaScript project: Deploying</em></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a0bec81b12df\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"Obviously, you need some JavaScript, HTML and CSS knowledge to start a JavaScript project. You also need to install Node on your computer and have a basic understanding of Git, although you can probably skip that last part. But in my experience with fellow programmers starting out with JavaScript and juniors jumping in their first project, the one thing that’s often the source of many misunderstandings is NPM (Node Package Manager).\nWhen installing Node, there are two commands that come with it: node and npm. The former is used to execute some server-side JavaScript (Node.js) and the latter to install third-party packages. Simply put, NPM is a cloud where developers publish their code so other developers can use it in their own project. For example, JavaScript doesn’t have a function to pick a random item from an Array so you could use the random-item package. Instead of downloading the files manually, you can simply run npm install random-item in your project. This article is mostly about NPM so I’ll expand on that later. For now, let’s start with the beginning.\nEvery JavaScript project has a package.json\nThe package.json is the file that describes the project, lists its dependencies (i.e random-item in our previous example) and commands. It can contain much more than that though, feel free to have a look at the full list of properties if you are curious. To create this file, you can run the command npm init at the root of your project. It will guide you through a few questions and create the package.json file at the end of the process.\nExample of a package.json with the default options.\nMost of the information contained by the package.json is useful when publishing your code to the “NPM cloud”. For example, the name, description, keywords, and author is what appears on the dedicated NPM page. You can ignore them if you do not plan to publish a package, they won’t have any effect. At this point, there are only three properties that you need to know: devDependencies, dependencies, and scripts.\nTracking development and production dependencies\nUnless you want to do it like in the good old jQuery days, tooling has become almost unavoidable in a JavaScript project. For example, the language’s latest features are not supported by all browsers so it’s pretty common to compile the code to something that can be executed by anyone’s browser. For that, you would need to install Babel. But then, if you want to split your code into separate files and use imports you would also need Webpack. CSS you said? That’s something of the past, you should consider styled components, CSS modules or Aphrodite. I could continue like that for a long time but you get the idea: there are a lot of things you might (or might not) want to install. Don’t be afraid though, the whole purpose of this serie is to install as few packages as possible.\nThe tooling I mentioned so far is for development. They are tools you need to install on your computer to compile the code. Ultimately, what you will deploy is the compiled code, not the source code so there is no point in installing them on the production server. To take an example, let’s install the package parcel-bundler as a development dependency:\nnpm install parcel-bundler --save-dev\nDoing so will update our previous package.json to the following:\nThe “devDependencies” property was added.\nThe parcel-bundler package has been installed and added to the devDependencies, with a specific version range (^1.11.0). What’s great with installing packages this way is that you know precisely what your project depends on and on which version. More importantly, if you were to git clone the project on another computer, you could install all the required dependencies by simply running npm install. This command would lookup your package.json file and install all the dependencies with the correct version.\nThat’s for development but some packages are going to be required for your project to run. Let’s say you are building an application that displays a random background color from an Array of possible values. The code could look like this:\nimport randomItem from 'random-item';\nconst colors = [\n  'red',\n  'yellow',\n  'orange',\n  'pink',\n  'green'\n];\nwindow.document.body.style.backgroundColor = randomItem(colors);\nIt uses the random-item package mentioned earlier in this article. In production, the random-item package will still be required for the application to work. In this case, random-item is a production dependency and should be installed as follows:\nnpm install random-item\nNot telling npm that random-item is a development dependency with the --save-dev flag suggests that it’s a production dependency. This command would update the package.json like so:\nThe “dependencies” property was added.\nJust like devDependencies, dependencies are installed when running the npm install command. Note that it’s pretty uncommon to manually edit those properties. Most of the time, they are updated through the npm CLI.\nAs you probably guessed, npm install is often the first command to run when cloning a JavaScript project. It will pull in all the dependencies and you should be good to go. The next step is to contribute to the project. You would need to start it and eventually compile the files when you make a change. Starting and compiling a JavaScript application differs from a project to another due to the different tooling and configuration. There is no one command to start a project, although there is a convention I will be sharing in this article. Still, it would be a pain to have to run parcel index.html --port 3000 --log-level 0 --openeverytime you want to start the server.\nCreate shortcut commands with npm scripts\nscripts is a package.json’s property that contains shortcut commands. If you wanted to alias the previous command to “start”, you could do the following:\n\nNow, when running npm run start npm will look into the package.json’s scripts and execute the command matching “start”, which is:\nparcel index.html --port 3000 --log-level 0 --open\nIf you try to run this command instead of the start script (through npm run start) an error would be thrown, telling you that “parcel” is not a known command. That’s because installing a package in a JavaScript project doesn’t install it on your computer, thankfully. The packages are only installed locally by default, in the “node_modules” folder. If you really wanted to run the command yourself, you would need to update it to:\n./node_modules/.bin/parcel index.html --port 3000 --log-level 0 --open\nThe “node_modules” folder contains a “.bin” folder with links to the packages’ executable command (if any). That prefix is automatically added by npm when running scripts so that’s one more reason for using them.\nThe conventions\nThe NPM CLI comes in with a few conventions. For example, the command to start a project is usually “start” and the one to test is “test”. For these commands, you can omit the “run” part in npm run start so npm start is equivalent. There are other official conventions but they are not as common as these two.\nWrapping up\nThat is enough NPM to get a JavaScript project running. I wanted to dedicate a whole article to NPM because I come too often across missing dependencies in the package.json and an unclear workflow to start and contribute when browsing juniors’ projects. The idea to keep in mind is that it should be simple for you, your future you getting back to the project later and possibly another developer.\nThis article is part of a serie:\n\nSetting up a JavaScript project: Introduction\nSetting up a JavaScript project: Prerequisites\nSetting up a JavaScript project: No-configuration tools\nSetting up a JavaScript project: Deploying"},"isoDate":"Feb 2, 2019"}},{"node":{"link":"https://medium.com/@Zh0uzi/my-concerns-with-react-hooks-6afda0acc672?source=rss-52eaf0669084------2","title":"My concerns with React hooks","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuYZdzBQM8r4-kKpED5Psg.jpeg\" /></figure><p>Until recently, React had two types of components: functional or class.</p><pre>import React from &#39;react&#39;;</pre><pre>function Foo(props) {<br>  return (<br>    &lt;div&gt;<br>      Hey {props.name}, this is a functional component.<br>    &lt;/div&gt;<br>  );<br>}</pre><pre>class Bar extends React.Component {<br>  render() {<br>    return (<br>      &lt;div&gt;<br>        Hey {this.props.name}, this is a class component.<br>      &lt;/div&gt;<br>    );<br>  }<br>}</pre><p>The difference between the two is that functional components are stateless and don’t have access to the component’s lifecycle. On the other hand, classes can execute code when the component is mounted, dismounted, updated, and so on. Also, classes can carry state from a render to another.</p><pre><em>import </em>React from &#39;react&#39;;<br><br><em>class </em>TodoList <em>extends </em>React.Component {<br>  constructor(props) {<br>    <em>super</em>(props);<br><br>    <em>this</em>.state = {<br>      todos: [<br>        {<br>          done: <em>false</em>,<br>          label: &#39;Do something&#39;<br>        }<br>      ]<br>    };<br>  }<br><br>  onToggleTodo(index) {<br>    <em>this</em>.setState(({ todos }) =&gt; ({<br>      todos: todos.map((todo, todoIndex) =&gt; {<br>        <em>if </em>(todoIndex === index) {<br>          <em>return </em>{<br>            ...todo,<br>            done: !todo.done<br>          };<br>        }<br><br>        <em>return </em>todo;<br>      })<br>    }));<br>  }<br><br>  render() {<br>    <em>return </em>(<br>      &lt;ul&gt;<br>        {<em>this</em>.state.todos.map((todo, index) =&gt; (<br>          &lt;li <em>key</em>={index}&gt;<br>            &lt;input<br>              <em>type</em>=&quot;checkbox&quot;<br>              <em>onChange</em>={() =&gt; <em>this</em>.onToggleTodo(index)}<br>              <em>checked</em>={todo.done}<br>            /&gt;<br>            {todo.label}<br>          &lt;/li&gt;<br>        ))}<br>      &lt;/ul&gt;<br>    );<br>  }<br>}</pre><p>If you have some experience developing web apps, you can probably guess what this code does — whether you’re used to React or not. The reason is that it’s almost pure JavaScript: classes are stateful by design. If the state is updated, one can expect the render method to return a different DOM tree.</p><h4>A new type of component: hooks</h4><p>The React team recently introduced a new API which fixes a lot of classes’ flaws. It’s now super easy to compose logic relying on a component’s lifecycle without mixing them all together. I love it but I’m a bit concerned at the same time. Before I get to my fears, let’s have a look at what the above class example looks like with hooks:</p><pre><em>import </em>React from &#39;react&#39;;<br><br><em>function </em>TodoList(props) {<br>  <em>const </em>[todos, setTodos] = React.useState([<br>    {<br>      done: <em>false</em>,<br>      label: &#39;Do something&#39;<br>    }<br>  ]);<br><br>  <em>const </em>onToggleTodo = index =&gt; {<br>    setTodos(currentTodos =&gt;<br>      currentTodos.map((todo, todoIndex) =&gt; {<br>        <em>if </em>(todoIndex === index) {<br>          <em>return </em>{<br>            ...todo,<br>            done: !todo.done<br>          };<br>        }<br><br>        <em>return </em>todo;<br>      })<br>    );<br>  };<br><br>  <em>return </em>(<br>    &lt;ul&gt;<br>      {todos.map((todo, index) =&gt; (<br>        &lt;li <em>key</em>={index}&gt;<br>          &lt;input<br>            <em>type</em>=&quot;checkbox&quot;<br>            <em>onChange</em>={() =&gt; onToggleTodo(index)}<br>            <em>checked</em>={todo.done}<br>          /&gt;<br>          {todo.label}<br>        &lt;/li&gt;<br>      ))}<br>    &lt;/ul&gt;<br>  );<br>}</pre><p>Simply put, hooks are stateful functional components. They can have state and have access to the component’s lifecycle. The first time I saw a React hook, I was pretty much like…</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FpPhyAv5t9V8djyRFJH%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FpPhyAv5t9V8djyRFJH%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FpPhyAv5t9V8djyRFJH%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"317\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a4d30650804f257dffde1c8a12eeeba5/href\">https://medium.com/media/a4d30650804f257dffde1c8a12eeeba5/href</a></iframe><p>Isn’t the state going to be the same every time the function is called? I mean, I’m defining it right there so how can’t it be? Well, it doesn’t make sense so I guess it’s stored somewhere. But where? And how can the function call be identified? For instance, if the component is used in two different places, how are they not confused together?</p><p>It was really messing with my brain so I’ve read lengthy articles explaining how it’s working under the hood. Basically, React attaches a component’s state in an array and retrieve it from its index. Which leads to the first warning: hooks must have the same order across calls. To be fair, I can’t think of a reason for swapping order so that’s easy to avoid. It also means that you can’t have conditional hooks:</p><pre><em>function </em>Bar(props) {<br>  <em>const </em>[todos, setTodos] = React.useState([]);<br><br>  <em>if </em>(props.filter) {<br>    <em>// This is impossible<br>    const </em>[filter, setFilter] = React.useState(<em>null</em>);<br>  }<br>}</pre><p>That example doesn’t make sense as well so that’s fine. But let’s get to a more reasonable use case. Imagine we have designed a hook that fetches a user from a database and caches it. We can use this hook wherever we need a user. So for example, here’s what we might want to do:</p><pre><em>import </em>React <em>from </em>&#39;react&#39;;<br><em>import </em>useUserQuery <em>from </em>&#39;./useUserQuery&#39;;<br><br><em>function </em>UserProfile(props) {<br>  <em>if </em>(props.userID) {<br>    <em>return </em>useUserQuery(props.userID, user =&gt; (<br>      &lt;div&gt;{user.displayName}&lt;/div&gt;<br>    ));<br>  }<br><br>  <em>return </em>&lt;div&gt;Anonymous&lt;/div&gt;;<br>}</pre><p>Yeah, but nah. This is a conditional hook. To fix it, we need to split the component:</p><pre><em>import </em>React <em>from </em>&#39;react&#39;;<br><em>import </em>LoggedInUserProfile <em>from </em>&#39;./LoggedInUserProfile&#39;;<br><br><em>function </em>UserProfile(props) {<br>  <em>if </em>(props.userID) {<br>    <em>return </em>&lt;LoggedInUserProfile <em>userID</em>={props.userID} /&gt;;<br>  }<br><br>  <em>return </em>&lt;div&gt;Anonymous&lt;/div&gt;;<br>}</pre><p>Hooks or not, the second solution is definitely cleaner — that’s not my point. The issue I have with this kind of rule is that it makes React less “pure JavaScript”. You can’t write such code not because the language makes it impossible but because it goes against React’s internals. Internals that are quite hard to understand. I’m not saying that React has been “pure JavaScript” so far but still, I believe the concepts were fairly easy to grasp. Here’s an illustration:</p><pre><em>import </em>React <em>from </em>&#39;react&#39;;</pre><pre><em>class </em>Foo <em>extends </em>React.Component {<br>  componentDidMount() {<br>    console.log(&#39;Foo is mounted&#39;);<br>  }<br><br>  componentDidUpdate() {<br>    console.log(&#39;Foo is updated&#39;);<br>  }<br><br>  render() {<br>    <em>return </em>&lt;div /&gt;;<br>  }<br>}</pre><p>This code is pretty self-explanatory: you can run code when the component is mounted and when it’s updated. Note that componentDidUpdate is not called when the component is mounted. Here’s what it looks like with hooks:</p><pre><em>import </em>React <em>from </em>&#39;react&#39;;</pre><pre><em>function </em>Bar() {<br>  React.useEffect(() =&gt; {<br>    console.log(&#39;Foo is mounted&#39;);<br>  }, []);<br><br>  React.useEffect(() =&gt; {<br>    console.log(&#39;Foo is udpated&#39;);<br>  });<br><br>  <em>return </em>&lt;div /&gt;;<br>}</pre><p>In this example, both messages are logged when the component is mounted. The second one is going to be logged everytime the component is rendered. The only difference between the two is the last argument of useEffect: []. It kind of make sense when you understand that this function is memoized but still, the class example is much more intuitive. It sums up my first concern with React hooks:</p><blockquote>React is becoming less intuitive and declarative, making it harder to understand.</blockquote><p>My second and last concern is about structure. A function is such a tiny place to hold all of a component’s state and logic. The code quickly becomes hard to read with variables, functions, state, and props floating around. I know, I know, if a component is getting too complex it probably means it should be split. Sometimes it’s just not that easy and complexity is not always avoidable.</p><h3>But I’m probably wrong</h3><p>I love React and I surely became a “fanboy”: I find it better than the alternatives in so many ways. If the React team thinks hooks are the way to go, then they must be right. We just need to get used to it and wait for the community to bring new conventions to help with the structure. It’s just that I want it to welcome new developers as well as before and not to turn into some form of black magic.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6afda0acc672\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"Until recently, React had two types of components: functional or class.\nimport React from 'react';\nfunction Foo(props) {\n  return (\n    <div>\n      Hey {props.name}, this is a functional component.\n    </div>\n  );\n}\nclass Bar extends React.Component {\n  render() {\n    return (\n      <div>\n        Hey {this.props.name}, this is a class component.\n      </div>\n    );\n  }\n}\nThe difference between the two is that functional components are stateless and don’t have access to the component’s lifecycle. On the other hand, classes can execute code when the component is mounted, dismounted, updated, and so on. Also, classes can carry state from a render to another.\nimport React from 'react';\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        {\n          done: false,\n          label: 'Do something'\n        }\n      ]\n    };\n  }\n  onToggleTodo(index) {\n    this.setState(({ todos }) => ({\n      todos: todos.map((todo, todoIndex) => {\n        if (todoIndex === index) {\n          return {\n            ...todo,\n            done: !todo.done\n          };\n        }\n        return todo;\n      })\n    }));\n  }\n  render() {\n    return (\n      <ul>\n        {this.state.todos.map((todo, index) => (\n          <li key={index}>\n            <input\n              type=\"checkbox\"\n              onChange={() => this.onToggleTodo(index)}\n              checked={todo.done}\n            />\n            {todo.label}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\nIf you have some experience developing web apps, you can probably guess what this code does — whether you’re used to React or not. The reason is that it’s almost pure JavaScript: classes are stateful by design. If the state is updated, one can expect the render method to return a different DOM tree.\nA new type of component: hooks\nThe React team recently introduced a new API which fixes a lot of classes’ flaws. It’s now super easy to compose logic relying on a component’s lifecycle without mixing them all together. I love it but I’m a bit concerned at the same time. Before I get to my fears, let’s have a look at what the above class example looks like with hooks:\nimport React from 'react';\nfunction TodoList(props) {\n  const [todos, setTodos] = React.useState([\n    {\n      done: false,\n      label: 'Do something'\n    }\n  ]);\n  const onToggleTodo = index => {\n    setTodos(currentTodos =>\n      currentTodos.map((todo, todoIndex) => {\n        if (todoIndex === index) {\n          return {\n            ...todo,\n            done: !todo.done\n          };\n        }\n        return todo;\n      })\n    );\n  };\n  return (\n    <ul>\n      {todos.map((todo, index) => (\n        <li key={index}>\n          <input\n            type=\"checkbox\"\n            onChange={() => onToggleTodo(index)}\n            checked={todo.done}\n          />\n          {todo.label}\n        </li>\n      ))}\n    </ul>\n  );\n}\nSimply put, hooks are stateful functional components. They can have state and have access to the component’s lifecycle. The first time I saw a React hook, I was pretty much like…\nhttps://medium.com/media/a4d30650804f257dffde1c8a12eeeba5/href\nIsn’t the state going to be the same every time the function is called? I mean, I’m defining it right there so how can’t it be? Well, it doesn’t make sense so I guess it’s stored somewhere. But where? And how can the function call be identified? For instance, if the component is used in two different places, how are they not confused together?\nIt was really messing with my brain so I’ve read lengthy articles explaining how it’s working under the hood. Basically, React attaches a component’s state in an array and retrieve it from its index. Which leads to the first warning: hooks must have the same order across calls. To be fair, I can’t think of a reason for swapping order so that’s easy to avoid. It also means that you can’t have conditional hooks:\nfunction Bar(props) {\n  const [todos, setTodos] = React.useState([]);\n  if (props.filter) {\n    // This is impossible\n    const [filter, setFilter] = React.useState(null);\n  }\n}\nThat example doesn’t make sense as well so that’s fine. But let’s get to a more reasonable use case. Imagine we have designed a hook that fetches a user from a database and caches it. We can use this hook wherever we need a user. So for example, here’s what we might want to do:\nimport React from 'react';\nimport useUserQuery from './useUserQuery';\nfunction UserProfile(props) {\n  if (props.userID) {\n    return useUserQuery(props.userID, user => (\n      <div>{user.displayName}</div>\n    ));\n  }\n  return <div>Anonymous</div>;\n}\nYeah, but nah. This is a conditional hook. To fix it, we need to split the component:\nimport React from 'react';\nimport LoggedInUserProfile from './LoggedInUserProfile';\nfunction UserProfile(props) {\n  if (props.userID) {\n    return <LoggedInUserProfile userID={props.userID} />;\n  }\n  return <div>Anonymous</div>;\n}\nHooks or not, the second solution is definitely cleaner — that’s not my point. The issue I have with this kind of rule is that it makes React less “pure JavaScript”. You can’t write such code not because the language makes it impossible but because it goes against React’s internals. Internals that are quite hard to understand. I’m not saying that React has been “pure JavaScript” so far but still, I believe the concepts were fairly easy to grasp. Here’s an illustration:\nimport React from 'react';\nclass Foo extends React.Component {\n  componentDidMount() {\n    console.log('Foo is mounted');\n  }\n  componentDidUpdate() {\n    console.log('Foo is updated');\n  }\n  render() {\n    return <div />;\n  }\n}\nThis code is pretty self-explanatory: you can run code when the component is mounted and when it’s updated. Note that componentDidUpdate is not called when the component is mounted. Here’s what it looks like with hooks:\nimport React from 'react';\nfunction Bar() {\n  React.useEffect(() => {\n    console.log('Foo is mounted');\n  }, []);\n  React.useEffect(() => {\n    console.log('Foo is udpated');\n  });\n  return <div />;\n}\nIn this example, both messages are logged when the component is mounted. The second one is going to be logged everytime the component is rendered. The only difference between the two is the last argument of useEffect: []. It kind of make sense when you understand that this function is memoized but still, the class example is much more intuitive. It sums up my first concern with React hooks:\nReact is becoming less intuitive and declarative, making it harder to understand.\nMy second and last concern is about structure. A function is such a tiny place to hold all of a component’s state and logic. The code quickly becomes hard to read with variables, functions, state, and props floating around. I know, I know, if a component is getting too complex it probably means it should be split. Sometimes it’s just not that easy and complexity is not always avoidable.\nBut I’m probably wrong\nI love React and I surely became a “fanboy”: I find it better than the alternatives in so many ways. If the React team thinks hooks are the way to go, then they must be right. We just need to get used to it and wait for the community to bring new conventions to help with the structure. It’s just that I want it to welcome new developers as well as before and not to turn into some form of black magic."},"isoDate":"Nov 2, 2018"}},{"node":{"link":"https://medium.com/@Zh0uzi/3-criteria-to-prioritize-bugs-53698bcda124?source=rss-52eaf0669084------2","title":"3 criteria to prioritize bugs","content":{"encoded":"<p>Because it’s impossible to anticipate every possible situation, bugs are unavoidable. No one likes bugs and we all want them to be fixed as soon as possible. The issue is that it’s not the only thing we expect from a product. We also want new features, support, communication, and the rest. In this situation, it’s important for a product to balance between all those demands. The priority of a bug is hard to evaluate because it tends to be subjective. From the perspective of the user facing a bug, it’s the most important one that needs to be fixed. From a developer’s perspective, perhaps it’s a feature they like and/or built so they want to fix it quickly too. In this situation, it’s primordial to take a step back and think about it from a neutral point of view.</p><p>The first criterion that often comes to mind is frequency. The bugs that are occurring the most need to be fixed first. After all, they’re probably the ones affecting most people in the most common situation. While it’s definitely a useful indicator, frequency alone is not enough. There are bugs that prevent a certain usage but have a simple workaround. They’re annoying but they don’t prevent your users from using the product. Obviously, they’re less important than bugs that crash the whole application.</p><p>As a second criterion, you should consider “annoyance”. The idea here is to evaluate how annoying the bug is. There are a few questions you can answer to do so: Is there a workaround? If so, how simple and natural is it? And if not, how bad are the consequences of the bug? For example, losing a user’s work is critical and has no workaround, at least from their end. On the other hand, it’s probably ok if the keyboard shortcut to print the page doesn’t work but you can still print it through the browser menu.</p><p>Frequency and annoyance are already two great criteria. The last thing missing in this equation is value. A product is the result of all its features combined but some of those are more valuable than the others. They’re the features the product sells, showcases on its homepage and what makes it different from its competitors. If you need to decide between fixing a nice-to-have and a feature that truly makes your users love your product, I guess you know what to do.</p><p>Frequency, annoyance, and value. They’re the three criteria to keep in mind when evaluating the importance of a bug. The point of those criteria is not to dismiss bugs report completely. It’s just an easier and less subjective way to decide which bug to fix first.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=53698bcda124\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"Because it’s impossible to anticipate every possible situation, bugs are unavoidable. No one likes bugs and we all want them to be fixed as soon as possible. The issue is that it’s not the only thing we expect from a product. We also want new features, support, communication, and the rest. In this situation, it’s important for a product to balance between all those demands. The priority of a bug is hard to evaluate because it tends to be subjective. From the perspective of the user facing a bug, it’s the most important one that needs to be fixed. From a developer’s perspective, perhaps it’s a feature they like and/or built so they want to fix it quickly too. In this situation, it’s primordial to take a step back and think about it from a neutral point of view.\nThe first criterion that often comes to mind is frequency. The bugs that are occurring the most need to be fixed first. After all, they’re probably the ones affecting most people in the most common situation. While it’s definitely a useful indicator, frequency alone is not enough. There are bugs that prevent a certain usage but have a simple workaround. They’re annoying but they don’t prevent your users from using the product. Obviously, they’re less important than bugs that crash the whole application.\nAs a second criterion, you should consider “annoyance”. The idea here is to evaluate how annoying the bug is. There are a few questions you can answer to do so: Is there a workaround? If so, how simple and natural is it? And if not, how bad are the consequences of the bug? For example, losing a user’s work is critical and has no workaround, at least from their end. On the other hand, it’s probably ok if the keyboard shortcut to print the page doesn’t work but you can still print it through the browser menu.\nFrequency and annoyance are already two great criteria. The last thing missing in this equation is value. A product is the result of all its features combined but some of those are more valuable than the others. They’re the features the product sells, showcases on its homepage and what makes it different from its competitors. If you need to decide between fixing a nice-to-have and a feature that truly makes your users love your product, I guess you know what to do.\nFrequency, annoyance, and value. They’re the three criteria to keep in mind when evaluating the importance of a bug. The point of those criteria is not to dismiss bugs report completely. It’s just an easier and less subjective way to decide which bug to fix first."},"isoDate":"Nov 3, 2018"}},{"node":{"link":"https://medium.com/@Zh0uzi/the-art-of-listening-to-juniors-b16306c53287?source=rss-52eaf0669084------2","title":"The art of listening to juniors","content":{"encoded":"<p>I am lucky that I regularly have the chance to mentor juniors through their career debut. I truly enjoy helping people develop their passion, especially when it’s a shared one. I take this role seriously and see it as a challenge. If someone I am helping fails at something I taught them, I take it personally and tend to believe the responsibility is mine. But I also know that you need to do the same thing over and over to learn. This mentality often led me to rethink the way I approach and teach things and I learned a lot along the way.</p><p>When teaching, there is the obvious and the less obvious. Obviously, you must spend more time explaining the concepts around a problem. You also need to make sure the vocabulary is well understood. But then there are things that might seem unnatural, things you need to keep in mind. One of those things is to understand how someone’s brain is wired.</p><p>For example, when an intern tells you that they are unable to do something the natural reaction is to walk them through the solution. Most of the times, the reason for their mistake is clear right from the very first few words. In this situation, it is tempting to just say “ok, I know what you did wrong, let me show you”. Bad news: by doing so you’re missing on the opportunity to build confidence and to get in their shoes. When a junior says they’re failing at something, they will often go into a lengthy explanation of all the things they tried. Unless you didn’t find the problem already, chances are this is going to be irrelevant to the solution.</p><p>The thing is that juniors often implement the correct solution but it doesn’t work. And then they do the same thing with you along their side and tada, it works! While they’re convinced they had done the exact same thing, their previous solution obviously had a tiny difference. That’s perfectly fine, it’s part of the learning.</p><p>So a junior’s lengthy explanation is unlikely to teach you anything about the problem at hand. But it tells you something way more important: how they’re wired. Listen closely to the words, pictures they use and how they link things together. Get a feeling of what they know and what they don’t. Do not interrupt them, your turn comes when they’re done talking. This approach has mainly three benefits.</p><p>The first is that it teaches you their language. You will be able to use their words and pictures when it comes to solving the problem. By speaking the same language, you’re offering an explanation that will look familiar to their brain — thus easier to understand and remember.</p><p>The second is that it gives you a clearer vision of what they know and what they don’t. When teaching something, it’s important to go through the fundamentals again and again until it lasts. But then there’s everything that’s beyond what they already know. You should not bring too many new concepts at the same time. Also, there’s no point in explaining them something that’s way too far from what they already know. A decent ratio would be to spend 80% on fundamentals and 20% on things that are one step further than what they already know. That’s why it is so important to understand where the next step is.</p><p>Finally, it builds confidence. By listening to a junior, you’re making them matter. By speaking their language, you’re humbly trying to be like them. They won’t be afraid of talking to you because they know you’re not going to use jargon. By limiting the new concepts you’re according them time to learn and breath.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b16306c53287\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"I am lucky that I regularly have the chance to mentor juniors through their career debut. I truly enjoy helping people develop their passion, especially when it’s a shared one. I take this role seriously and see it as a challenge. If someone I am helping fails at something I taught them, I take it personally and tend to believe the responsibility is mine. But I also know that you need to do the same thing over and over to learn. This mentality often led me to rethink the way I approach and teach things and I learned a lot along the way.\nWhen teaching, there is the obvious and the less obvious. Obviously, you must spend more time explaining the concepts around a problem. You also need to make sure the vocabulary is well understood. But then there are things that might seem unnatural, things you need to keep in mind. One of those things is to understand how someone’s brain is wired.\nFor example, when an intern tells you that they are unable to do something the natural reaction is to walk them through the solution. Most of the times, the reason for their mistake is clear right from the very first few words. In this situation, it is tempting to just say “ok, I know what you did wrong, let me show you”. Bad news: by doing so you’re missing on the opportunity to build confidence and to get in their shoes. When a junior says they’re failing at something, they will often go into a lengthy explanation of all the things they tried. Unless you didn’t find the problem already, chances are this is going to be irrelevant to the solution.\nThe thing is that juniors often implement the correct solution but it doesn’t work. And then they do the same thing with you along their side and tada, it works! While they’re convinced they had done the exact same thing, their previous solution obviously had a tiny difference. That’s perfectly fine, it’s part of the learning.\nSo a junior’s lengthy explanation is unlikely to teach you anything about the problem at hand. But it tells you something way more important: how they’re wired. Listen closely to the words, pictures they use and how they link things together. Get a feeling of what they know and what they don’t. Do not interrupt them, your turn comes when they’re done talking. This approach has mainly three benefits.\nThe first is that it teaches you their language. You will be able to use their words and pictures when it comes to solving the problem. By speaking the same language, you’re offering an explanation that will look familiar to their brain — thus easier to understand and remember.\nThe second is that it gives you a clearer vision of what they know and what they don’t. When teaching something, it’s important to go through the fundamentals again and again until it lasts. But then there’s everything that’s beyond what they already know. You should not bring too many new concepts at the same time. Also, there’s no point in explaining them something that’s way too far from what they already know. A decent ratio would be to spend 80% on fundamentals and 20% on things that are one step further than what they already know. That’s why it is so important to understand where the next step is.\nFinally, it builds confidence. By listening to a junior, you’re making them matter. By speaking their language, you’re humbly trying to be like them. They won’t be afraid of talking to you because they know you’re not going to use jargon. By limiting the new concepts you’re according them time to learn and breath."},"isoDate":"Oct 4, 2018"}},{"node":{"link":"https://medium.com/@Zh0uzi/setting-up-a-javascript-project-introduction-c8eca809b133?source=rss-52eaf0669084------2","title":"Setting up a JavaScript project: Introduction","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ElL4jIZ18Ry8lx-CjpzTZg.jpeg\" /></figure><p>The JavaScript language has been evolving at an exponentially fast pace for a few years. With new tools and features came an increasing complexity. The complexity doesn’t come from the language itself but from the myriad of things you need to do before you can actually code. With so many possibilities JavaScript offers, it’s sad to see newcomers being discouraged. The language is supposed to unleash creativity, not to cause headaches.</p><p>But why is all this mess needed in the first place, you might ask. A few years ago, writing JavaScript was as easy as throwing a script tag in an HTML file. Technically, that is still possible but probably not as fun as it was.</p><p>The thing is that JavaScript used to be a web page’s enhancer. It was used to create carousels and the like in a page fully served by a backend. Turning it off wasn’t so bad back then, the page would still be fine. But then we wanted to make things faster and more reactive. That is not possible if clicking a button triggers a whole page load. So we started to use AJAX, doing things asynchronously. And all of a sudden, we were loading a page’s content with JavaScript. Down this path, we started to handle routing in the browser. Navigating from a page to another didn’t need a full page load anymore. That’s when people started to call a web page a “web application”.</p><p>The problem is that browsers are hardly keeping up. Even if they were, every user would have to be on the latest version at any time. Because JavaScript is going faster than its environments, it has to be compiled to a version that’s universally understood. Which means we need tools to compile JavaScript. That’s the tip of the iceberg, though. With JavaScript taking a larger and larger place in a product’s development, it became serious business. It needed testing and code quality tools, dependency management, modules, a real ecosystem, and so on. On the other hand, the community is growing bigger every day and with it appear new ideas. We now write HTML-ish (JSX) and CSS in JavaScript. We can also create mobile and desktop applications, among other things.</p><p>Such diverse use cases have a price which comes in the form of configuration. Tools that work out of the box are pretty rare. Yet, there are some and the good news is that this is all this serie of articles is about! I will show you how to get from A to B without all the hassle. I want you to build that project you have in mind, and deploy it for everyone to see. Here’s how I’m planning this serie:</p><ul><li><a href=\"https://medium.com/@Zh0uzi/setting-up-a-javascript-project-introduction-c8eca809b133\">Introduction: what is this serie about and why I think it’s needed.</a></li><li><a href=\"https://medium.com/@Zh0uzi/setting-up-a-javascript-project-prerequisites-a0bec81b12df\">Prerequisites: things you need to know about JavaScript projects in general.</a></li><li><em>No-configuration tools: tools that involve just a few commands to compile your code.</em></li><li><em>Deploying: giving birth to your project.</em></li></ul><p>This serie is for people that don’t know where to start when setting up a JavaScript project. It won’t go too far into the details but focus on the mandatory. The main goal is to get things done, not necessarily to learn how build tools work in-depth.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c8eca809b133\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"The JavaScript language has been evolving at an exponentially fast pace for a few years. With new tools and features came an increasing complexity. The complexity doesn’t come from the language itself but from the myriad of things you need to do before you can actually code. With so many possibilities JavaScript offers, it’s sad to see newcomers being discouraged. The language is supposed to unleash creativity, not to cause headaches.\nBut why is all this mess needed in the first place, you might ask. A few years ago, writing JavaScript was as easy as throwing a script tag in an HTML file. Technically, that is still possible but probably not as fun as it was.\nThe thing is that JavaScript used to be a web page’s enhancer. It was used to create carousels and the like in a page fully served by a backend. Turning it off wasn’t so bad back then, the page would still be fine. But then we wanted to make things faster and more reactive. That is not possible if clicking a button triggers a whole page load. So we started to use AJAX, doing things asynchronously. And all of a sudden, we were loading a page’s content with JavaScript. Down this path, we started to handle routing in the browser. Navigating from a page to another didn’t need a full page load anymore. That’s when people started to call a web page a “web application”.\nThe problem is that browsers are hardly keeping up. Even if they were, every user would have to be on the latest version at any time. Because JavaScript is going faster than its environments, it has to be compiled to a version that’s universally understood. Which means we need tools to compile JavaScript. That’s the tip of the iceberg, though. With JavaScript taking a larger and larger place in a product’s development, it became serious business. It needed testing and code quality tools, dependency management, modules, a real ecosystem, and so on. On the other hand, the community is growing bigger every day and with it appear new ideas. We now write HTML-ish (JSX) and CSS in JavaScript. We can also create mobile and desktop applications, among other things.\nSuch diverse use cases have a price which comes in the form of configuration. Tools that work out of the box are pretty rare. Yet, there are some and the good news is that this is all this serie of articles is about! I will show you how to get from A to B without all the hassle. I want you to build that project you have in mind, and deploy it for everyone to see. Here’s how I’m planning this serie:\n\nIntroduction: what is this serie about and why I think it’s needed.\nPrerequisites: things you need to know about JavaScript projects in general.\nNo-configuration tools: tools that involve just a few commands to compile your code.\nDeploying: giving birth to your project.\n\nThis serie is for people that don’t know where to start when setting up a JavaScript project. It won’t go too far into the details but focus on the mandatory. The main goal is to get things done, not necessarily to learn how build tools work in-depth."},"isoDate":"Sep 4, 2018"}},{"node":{"link":"https://medium.com/@Zh0uzi/on-banning-racial-terms-in-programming-bdc5b6255d9f?source=rss-52eaf0669084------2","title":"On banning racial terms in programming","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3zOwcdb1-wXuo_Ej-kpQDw.jpeg\" /><figcaption>Tamil Temple, Saint-Pierre, La Réunion</figcaption></figure><blockquote><strong>Update June 7, 2020</strong>: The recent events in the US and around the world with the BLM movement made me realize a few things. Racism is real and way worse than I ever imagined and experienced myself. It’s pointless to ignore it, we need to redesign our society by starting with the outdated concepts that have been introduced a long time ago. I am sad that we have to fight for something I was hoping would be natural for everyone but I am also convinced that together we can make it right.</blockquote><p>There’s a trend lately with people banning words for their racial connotation in programming. A few examples are <a href=\"https://github.com/antirez/redis/issues/3185\">master/slave</a>, <a href=\"https://github.com/facebook/react/issues/13604\">blacklist and whitelist</a>. I can’t help but believe that this is wrong and counter-effective. You can’t fix racism by overreacting and introducing it everywhere.</p><p>I was born and raised in <a href=\"https://en.wikipedia.org/wiki/R%C3%A9union\">La Réunion</a>, a little french Island near Madagascar. La Réunion is well known for its diversity. People of all origins are mixed together. It’s not unusual to cross a mosque, a church, a Tamil and a Buddhist temple a few streets apart. Like many other islands, it has a strong past of slavery. Many places are named after famous slaves that successfully fleed their master. It’s so important for us that we even have a bank-holiday day to commemorate, on December 20th. It’s specific to La Réunion, for the rest of France it’s a day like any other.</p><p>My mother and her ancestors are from La Réunion. My father is from Metropolitan France. We’re kinda white. Yet, I feel definitely closer to the people that should be offended by words such as “master/slave”. Truth is, I have never been. The reason is that I never thought of it as “master” referring to a person ruling other persons (aka “slaves”). To me, it’s a technical term with a clear definition, as nicely put by Sachit Gupta in his answer on Quora:</p><blockquote>The word MASTER actually refers to the ability of a part (in any context, not just computing) to control the working of the rest of the system. Whereas the word SLAVE suggests the characteristic feature of a part to be dependent on other part to carry out the function that it is meant to perform.</blockquote><p>By banning those words, you’re giving them the meaning you don’t want them to have. You are turning a technical term into a racial debate. If you’re not racist, then you should be smart enough to make the distinction. I’m not saying that we shouldn’t be careful about the words we use but master/slave are facts at worst. It’s part of our history and everyone should know about it. If the terms were to be used in a racist way then fine, it would help us spot racists earlier and ban them from the programming community. In the end, what’s wrong is not the words themselves but the way they’re used.</p><p>In La Réunion, I wouldn’t be afraid of asking a friend if their parents are black. In Metropolitan France, and elsewhere, I would be more cautious. The thing is that I know this question wouldn’t have a second meaning in La Réunion. When I’m asking if your parents are black, I’m just curious to know where your nice skin color comes from. I didn’t mean to suggest anything. It never crosses our mind that people could be offended by it. I don’t mind being called white, grey, black or whatever if that’s what your eyes are telling you.</p><p>I believe racism should be fought by banning racists and making the whole thing non-existent. We don’t have to agree but we need to find a consensus. If people feel unwelcome in programming because of its terminology then let’s discuss it. We can probably find better alternatives but let’s just not rush it.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bdc5b6255d9f\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"Tamil Temple, Saint-Pierre, La Réunion\nUpdate June 7, 2020: The recent events in the US and around the world with the BLM movement made me realize a few things. Racism is real and way worse than I ever imagined and experienced myself. It’s pointless to ignore it, we need to redesign our society by starting with the outdated concepts that have been introduced a long time ago. I am sad that we have to fight for something I was hoping would be natural for everyone but I am also convinced that together we can make it right.\nThere’s a trend lately with people banning words for their racial connotation in programming. A few examples are master/slave, blacklist and whitelist. I can’t help but believe that this is wrong and counter-effective. You can’t fix racism by overreacting and introducing it everywhere.\nI was born and raised in La Réunion, a little french Island near Madagascar. La Réunion is well known for its diversity. People of all origins are mixed together. It’s not unusual to cross a mosque, a church, a Tamil and a Buddhist temple a few streets apart. Like many other islands, it has a strong past of slavery. Many places are named after famous slaves that successfully fleed their master. It’s so important for us that we even have a bank-holiday day to commemorate, on December 20th. It’s specific to La Réunion, for the rest of France it’s a day like any other.\nMy mother and her ancestors are from La Réunion. My father is from Metropolitan France. We’re kinda white. Yet, I feel definitely closer to the people that should be offended by words such as “master/slave”. Truth is, I have never been. The reason is that I never thought of it as “master” referring to a person ruling other persons (aka “slaves”). To me, it’s a technical term with a clear definition, as nicely put by Sachit Gupta in his answer on Quora:\nThe word MASTER actually refers to the ability of a part (in any context, not just computing) to control the working of the rest of the system. Whereas the word SLAVE suggests the characteristic feature of a part to be dependent on other part to carry out the function that it is meant to perform.\nBy banning those words, you’re giving them the meaning you don’t want them to have. You are turning a technical term into a racial debate. If you’re not racist, then you should be smart enough to make the distinction. I’m not saying that we shouldn’t be careful about the words we use but master/slave are facts at worst. It’s part of our history and everyone should know about it. If the terms were to be used in a racist way then fine, it would help us spot racists earlier and ban them from the programming community. In the end, what’s wrong is not the words themselves but the way they’re used.\nIn La Réunion, I wouldn’t be afraid of asking a friend if their parents are black. In Metropolitan France, and elsewhere, I would be more cautious. The thing is that I know this question wouldn’t have a second meaning in La Réunion. When I’m asking if your parents are black, I’m just curious to know where your nice skin color comes from. I didn’t mean to suggest anything. It never crosses our mind that people could be offended by it. I don’t mind being called white, grey, black or whatever if that’s what your eyes are telling you.\nI believe racism should be fought by banning racists and making the whole thing non-existent. We don’t have to agree but we need to find a consensus. If people feel unwelcome in programming because of its terminology then let’s discuss it. We can probably find better alternatives but let’s just not rush it."},"isoDate":"Sep 2, 2018"}}]}},"pageContext":{}},"staticQueryHashes":["1582346309"]}